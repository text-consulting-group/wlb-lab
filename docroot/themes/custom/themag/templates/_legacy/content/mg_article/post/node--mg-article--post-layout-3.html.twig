{#
/**
 * @file
 * Theme override to display a node post layout 3.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% extends '@themag/_legacy/content/mg_article/post/node--mg-article.html.twig' %}

{% set attributes = attributes.addClass('post-layout-3') %}
{% set title_attributes = title_attributes.addClass('text-white') %}

{# Set "stick-in-parent" if sticky sidebare is enabled#}
{% if themag.sticky_sidebar %}
  {% set sticky_classs = 'stick-in-parent' %}
{% endif %}

{% block article %}
  <article{{ attributes }}>


    {# Paralax image and article title #}
    {# ------------------------------- #}
    {% block article_media %}
      {{ attach_library('charm/parallax-js') }}

      {#
        Wide header image will used image style only if the image field
        is enabled in Manage display settings and if it use "image_url" formatter.
        Otherwise the header will be used original image size.
      #}
      {% if content.field_mg_image and content.field_mg_image['#formatter'] == 'image_url' %}
        {% set teaser_image_url = content.field_mg_image.0['#markup'] %}
      {% else %}
        {% set teaser_image_url = file_url(node.field_mg_image.entity.uri.value) %}
      {% endif  %}


      {# Parallax image #}
      {# -------------- #}
      <div class="d-flex align-items-center teaser-image-parallax"
           data-parallax="scroll"
           data-image-src="{{ teaser_image_url }} ">


        {# Title and category #}
        {# ------------------ #}
        <div class="container">
          <div class="row">
            <div class="col-12 col-lg-10 mx-auto text-center">
              {% block category %}
                {{ parent() }}
              {% endblock %}
              {% block title %}
                {{ parent() }}
              {% endblock %}
            </div>
          </div>
        </div>
      </div>
    {% endblock %}


    {# Content wapper #}
    {# -------------- #}
    {% block content_wrapper %}
      <div class="container">


        {# Author info and share buttons #}
        {# ----------------------------- #}
        <div class="row">
          <div class="col-12">
            {% block article_footer %}
              {{ parent() }}
            {% endblock %}
          </div>
        </div>


        {# Article content #}
        {# ----------------#}
        <div class="row">
          <div class="col-12 col-lg-8">

            {#--- Tabs ---#}
            {% block tabs %}
              {{ parent() }}
            {% endblock %}

            {% block content %}
              {{ parent() }}
            {% endblock %}


            {# Comments #}
            {# -------- #}
            {% set comments_wrapper_classes = 'comments-wrapper mt-6 p-4 p-lg-6' %}
            {% if(node.field_mg_comments.value.0.status == 1 and node.field_mg_comments.value.0.comment_count == 0) %}
              {% set comments_wrapper_classes = 'd-nonde' %}
            {% endif %}

            {% block comments_wrapper %}
             {% if(node.field_mg_comments.value.0.status != 0) %}
                <div class="{{ comments_wrapper_classes }}">
                  {% block comments %}
                    {{ content.field_mg_comments }}
                  {% endblock %}
                </div>
              {% endif %}
            {% endblock %}
          </div>


          {# Right sidebar #}
          {# ------------- #}
          <div class="col-12 col-lg-4">
            <div class="inner {{ sticky_classs }}">
              {{ drupal_region('content_right') }}
            </div>
          </div>
        </div>

      </div>
    {% endblock %}

  </article>
{% endblock %}
