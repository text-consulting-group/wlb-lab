{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

{# Set attributes variables. #}
{% set attributes = attributes.addClass(classes) %}
{% set title_attributes = title_attributes.addClass('page-title') %}
{% set author_attributes = author_attributes.addClass('node__submitted') %}
{% set content_attributes = content_attributes.addClass('node__content') %}

{# Set other variables. #}
{% set author_page_url %}{{ url('<front>') }}author/{{ node.getOwner().id() }}{% endset %}



{% block article %}
<article{{ attributes }}>

  {#--- Node category ---#}
  {% block category %}
    {{ content.field_mg_category }}
  {% endblock %}


  {#--- Node title ---#}
  {% block title %}
    {{ title_prefix }}
    <h1{{ title_attributes }}>
      {{ label }}
    </h1>
    {{ title_suffix }}
  {% endblock %}


  {#--- Author Info and Social Buttins---#}
  {% block article_footer %}
    <footer class="row no-gutters justify-content-between align-items-center mt-4 mb-3 mb-lg-4 pb-3 author-info-wrapper">
      {% if display_submitted %}
        <div class="col-12 col-lg-auto">

            <div class="submitted d-flex align-items-center mb-2 mb-lg-0 pb-2 pb-lg-0">
              {% block author_info %}
                <div class="user-picture mr-3">{{ author_picture }}</div>
                <div{{ author_attributes }}>
                  {% trans %}
                    By <a href="{{ author_page_url }}">{{ author_name }}</a> on {{ date }}
                  {% endtrans %}
                  {{ metadata }}
                </div>
              {% endblock %}
            </div>
        </div>
      {% endif %}
      <div class="col-12 col-lg-4">
        {% block social_buttons %}
          {% include '@themag/_legacy/components/social/rrssb-buttons.html.twig' %}
        {% endblock %}
      </div>
    </footer>
  {% endblock %}


  {#--- Tabs ---#}
  {% block tabs %}
    {{ drupal_region('content_administration') }}
  {% endblock %}


  {#--- Node content ---#}
  {% block content %}
    <div{{ content_attributes }}>
      {{ content|without('field_mg_comments', 'field_mg_category', 'field_mg_image') }}
    </div>
  {% endblock %}



  {% set comments_wrapper_classes = 'comments-wrapper p-4 p-lg-6' %}
  {% if(node.field_mg_comments.value.0.status == 1 and node.field_mg_comments.value.0.comment_count == 0) %}
    {% set comments_wrapper_classes = 'd-nonde' %}
  {% endif %}

  {% block comments %}
    {% if(node.field_mg_comments.value.0.status != 0) %}
      <div class="{{ comments_wrapper_classes }}">
         {{ content.field_mg_comments }}
      </div>
    {% endif %}
  {% endblock %}

</article>
{% endblock %}
